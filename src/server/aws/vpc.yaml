AWSTemplateFormatVersion: '2010-09-09'
Description: >
  The VPC stack for this region.
  Stack should be named "VPC".


Parameters:
  CreateTempSecurityGroup:
    Type: String
    Default: true
    Description: >
      Create an empty security group with this stack
      to allow temporary ingress.
    AllowedValues:
      - true
      - false


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Options
        Parameters:
          - CreateTempSecurityGroup


Mappings:
  RegionMap:
    us-east-1:
      AZs:
      - us-east-1a
      - us-east-1b
    us-east-2:
      AZs:
      - us-east-2a
      - us-east-2b
    eu-west-2:
      AZs:
      - eu-west-2a
      - eu-west-2b
    ap-southeast-1:
      AZs:
      - ap-southeast-1a
      - ap-southeast-1b


Conditions:
  CreateTempSecurityGroup: !Equals [!Ref 'CreateTempSecurityGroup', true]


Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  PublicSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [
        0,
        !FindInMap [RegionMap, !Ref 'AWS::Region', AZs]
      ]
      VpcId: !Ref 'VPC'
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [
        1,
        !FindInMap [RegionMap, !Ref 'AWS::Region', AZs]
      ]
      VpcId: !Ref 'VPC'
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref 'RouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'InternetGateway'

  SubnetRouteTableAssociation0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet0'
      RouteTableId: !Ref 'RouteTable'

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet1'
      RouteTableId: !Ref 'RouteTable'

  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  InboundNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'NetworkAcl'
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0

  OutBoundNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'NetworkAcl'
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  PublicSubnetNetworkAclAssociation0:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet0'
      NetworkAclId: !Ref 'NetworkAcl'

  PublicSubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet1'
      NetworkAclId: !Ref 'NetworkAcl'

  TempSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateTempSecurityGroup
    Properties:
      GroupDescription: !Join [' ', [Temporary security group for, !Ref 'AWS::StackName']]
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref 'AWS::StackName', temp]]
      VpcId: !Ref 'VPC'

  DDBVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref 'VPC'
      RouteTableIds:
        - !Ref 'RouteTable'
      ServiceName: !Join ['.', [com.amazonaws, !Ref 'AWS::Region', dynamodb]]

  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref 'VPC'
      RouteTableIds:
        - !Ref 'RouteTable'
      ServiceName: !Join ['.', [com.amazonaws, !Ref 'AWS::Region', s3]]


Outputs:
  StackName:
    Description: Stack Name
    Value: !Ref 'AWS::StackName'
    Export:
      Name: !Sub '${AWS::StackName}-NetworkStackName'

  AZ0:
    Description: Availability zone 0
    Value: !Select [
      0,
      !FindInMap [RegionMap, !Ref 'AWS::Region', AZs]
    ]
    Export:
      Name: !Sub '${AWS::StackName}-AZ0'
  AZ1:
    Description: Availability zone 1
    Value: !Select [
      1,
      !FindInMap [RegionMap, !Ref 'AWS::Region', AZs]
    ]
    Export:
      Name: !Sub '${AWS::StackName}-AZ1'

  PublicSubnet0:
    Description: Subnet id 0
    Value: !Ref 'PublicSubnet0'
    Export:
      Name: !Sub '${AWS::StackName}-Subnet0'

  PublicSubnet1:
    Description: Subnet id 1
    Value: !Ref 'PublicSubnet1'
    Export:
      Name: !Sub '${AWS::StackName}-Subnet1'

  VpcId:
    Description: VPC id
    Value: !Ref 'VPC'
    Export:
      Name: !Sub '${AWS::StackName}-VpcId'

  TempSecurityGroup:
    Condition: CreateTempSecurityGroup
    Description: Temp Security Group
    Value: !GetAtt 'TempSecurityGroup.GroupId'
    Export:
      Name: !Sub '${AWS::StackName}-TempSecurityGroup'