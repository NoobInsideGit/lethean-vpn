AWSTemplateFormatVersion: '2010-09-09'
Description: Creates an autoscaling group of lethean nodes

Parameters:
  DesiredNumberOfNodes:
    Type: Number
    Default: 1
    Description: >
      The desired number of nodes to start.
    AllowedValues:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5

  DeploymentType:
    Type: String
    Default: dev
    Description: The type of deployment
    AllowedValues:
      - prod
      - dev
      - test

  InitialDNSWeight:
    Type: Number
    Default: 0
    Description: The initial weight of the DNS record
    AllowedValues:
      - 0
      - 1
      - 5
      - 10

  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t3.micro
      - t3.small
      - t3.medium

  Branch:
    Type: String
    Default: master
    Description: Git branch to deploy from https://github.com/LetheanMovement/lethean-vpn
    AllowedPattern: .+

  DaemonBinUrl:
    Type: String
    Default: 'https://github.com/LetheanMovement/lethean/releases/download/v3.1.0/lethean-cli-linux-64bit-v3.1.tar.bz2'
    Description: Version of daemon binaries to use
    AllowedPattern: ^http.+

  VPCStack:
    Type: String
    Default: VPC
    Description: >
      The name of the VPC stack.

  SeedBlockchain:
    Type: String
    Default: fromS3
    Description: >
      Mount snapshot with historic blocks.
    AllowedValues:
      - doNotSeed
      - fromS3

  TXRateLimitKBs:
    Type: Number
    Description: >
      The upload bandwidth rate limit.
    Default: 500


Mappings:
  RegionMap:
    Global:
      Key: admin
      DataDir: .intensecoin
    us-east-1:
      AMI: ami-759bc50a # ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server
    us-east-2:
      AMI: ami-5e8bb23b
    us-west-1:
      AMI: ami-4aa04129
    us-west-2:
      AMI: ami-ba602bc2
    eu-west-1:
      AMI: ami-4aa04129
    eu-central-1:
      AMI: ami-de8fb135
    eu-west-2:
      AMI: ami-6b3fd60c
    ap-northeast-1:
      AMI: ami-98cfaa75
    ap-southeast-1:
      AMI: ami-41e4af3d
    sa-east-1:
      AMI: ami-8eecc9e2

  DeploymentMap:
    prod:
      S3Bucket: prod.cloud.lethean.io
      AttachToTempSecurityGroup: false
      HostedZone: cloud.lethean.io

    dev:
      S3Bucket: dev.cloud.lethean.io
      AttachToTempSecurityGroup: true
      HostedZone: dev.cloud.lethean.io

    test:
      S3Bucket: test.cloud.lethean.io
      AttachToTempSecurityGroup: true
      HostedZone: test.cloud.lethean.io


Conditions:
  SeedBlockchainFromS3: !Equals [!Ref 'SeedBlockchain', fromS3]
  AttachToTempSecurityGroup: !Equals [!FindInMap [DeploymentMap, !Ref 'DeploymentType', AttachToTempSecurityGroup], true]


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Deployment Parameters
        Parameters:
          - DesiredNumberOfNodes
          - DeploymentType
      - Label:
          default: Advanced Parameters
        Parameters:
          - InitialDNSWeight
          - TXRateLimitKBs
          - InstanceType
          - VPCStack
          - SeedBlockchain
          - Branch
          - DaemonBinUrl


Resources:
  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for LTHN nodes'
      SecurityGroupIngress:
        - Description: 'HAProxy incoming'
          IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - Description: 'LTHN daemon P2P bind port'
          IpProtocol: tcp
          FromPort: 48772
          ToPort: 48772
          CidrIp: 0.0.0.0/0
        - Description: 'LTHN daemon RPC bind port'
          IpProtocol: tcp
          FromPort: 48782
          ToPort: 48782
          CidrIp: 0.0.0.0/0
      VpcId: !ImportValue {'Fn::Sub': '${VPCStack}-VpcId'}

  S3ReadOnlyAccessInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - !Ref 'S3ReadOnlyAccessRole'

  S3ReadOnlyAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [
        cf-,  # Instance role names must begin with cf-
        s3readonly-,
        !Ref 'AWS::StackName',
        !Ref 'AWS::Region'
      ]]
      AssumeRolePolicyDocument: {
        "Version" : "2012-10-17",
        "Statement" : [
          {
            "Effect" : "Allow",
            "Principal" : {
              "Service" : ["ec2.amazonaws.com"]
            },
            "Action" : [
              "sts:AssumeRole"
            ]
          }
        ]
      }
      ManagedPolicyArns:
       - arn:aws:iam::aws:policy/AmazonS3FullAccess

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join ['-', [
        !Ref 'AWS::StackName',
        !Select ['0', !Split ['-', !Select ['2', !Split [/, !Ref 'AWS::StackId']]]],
        RPC
      ]]
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt 'NodeSecurityGroup.GroupId'
      Subnets:
        - !ImportValue {'Fn::Sub': '${VPCStack}-Subnet0'}
        - !ImportValue {'Fn::Sub': '${VPCStack}-Subnet1'}

  DNS:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Join [., [!FindInMap [DeploymentMap, !Ref 'DeploymentType', HostedZone], '']]
      Name: !Join [., [
        nodes,
        !Ref 'AWS::Region',
        !FindInMap [DeploymentMap, !Ref 'DeploymentType', HostedZone]
      ]]
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt 'LoadBalancer.CanonicalHostedZoneID'
        DNSName: !GetAtt 'LoadBalancer.DNSName'
      Weight: !Ref 'InitialDNSWeight'
      SetIdentifier: !Ref 'AWS::StackName'

  RPCListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'RPCTargetGroup'
          Type: forward
      LoadBalancerArn: !Ref 'LoadBalancer'
      Port: 48782
      Protocol: HTTP


  RPCTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 29
      UnhealthyThresholdCount: 3
      HealthyThresholdCount: 2
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 20
      Port: 48782
      Protocol: HTTP
      VpcId: !ImportValue {'Fn::Sub': '${VPCStack}-VpcId'}
      HealthCheckPath: /json_rpc
      Name: !Join ['-', [
        !Ref 'AWS::StackName',
        !Select ['0', !Split ['-', !Select ['2', !Split [/, !Ref 'AWS::StackId']]]],
        RPC
      ]]

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: !Ref 'S3ReadOnlyAccessInstanceProfile'
          buckets:
            - !FindInMap [DeploymentMap, !Ref 'DeploymentType', S3Bucket]
            - !Join [., [
                !Ref 'AWS::Region',
                !FindInMap [DeploymentMap, !Ref 'DeploymentType', S3Bucket]
              ]]
      AWS::CloudFormation::Init:
        configSets:
          default:
            - InstanceSetup
            - Deploy

        InstanceSetup:
          packages:
            apt:
              htop: []
              multitail: []
              supervisor: []
            python:
              awscli: []
          files:
            /home/ubuntu/boot-log.sh:
              content: |
                #!/bin/bash
                if hash multitail 2>/dev/null
                then
                   multitail -Mb 10MB --follow-all \
                           -n 1000 /var/log/cloud-init-output.log \
                           -n 1000 /var/log/cfn-init.log \
                           -n 1000 /var/log/cfn-init-cmd.log
                else
                   tail    -f /var/log/cloud-init-output.log \
                           -f /var/log/cfn-init.log \
                           -f /var/log/cfn-init-cmd.log
                fi
              mode: '000755'
              owner: ubuntu
              group: ubuntu
            /home/ubuntu/upload_lmdb.sh:
              content: !Sub
                - |
                  #!/bin/bash

                  pid=$(pgrep letheand)

                  if [ $? -ne 0 ]
                  then
                  echo "No letheand process found"
                  exit $?
                  fi

                  # Get command and arguments
                  cmd=$(xargs -0 < /proc/$(pgrep letheand)/cmdline)

                  if [ $? -ne 0 ]
                  then
                  echo "Could not get command"
                  exit $?
                  fi

                  # Stop daemon
                  echo "Stopping daemon"
                  kill $pid
                  sleep 5

                  # Copy files
                  echo "Uploading files to S3"
                  /usr/local/bin/aws s3 cp --no-progress /home/ubuntu/${DATA_DIR}/lmdb/data.mdb s3://${AWS::Region}.${BUCKET}/${PREFIX}lmdb/data.mdb
                  /usr/local/bin/aws s3 cp --no-progress /home/ubuntu/${DATA_DIR}/lmdb/lock.mdb s3://${AWS::Region}.${BUCKET}/${PREFIX}lmdb/lock.mdb

                  # Run daemon with original arguments
                  echo "Running $cmd"
                  eval $cmd
                - BUCKET: !FindInMap [DeploymentMap, !Ref 'DeploymentType', S3Bucket]
                  PREFIX: daemon/
                  DATA_DIR: !FindInMap [RegionMap, Global, DataDir]
              mode: '000755'
              owner: ubuntu
              group: ubuntu
          commands:
            00_installSSHKeys:
              env:
                BUCKET: !FindInMap [DeploymentMap, !Ref 'DeploymentType', S3Bucket]
                PREFIX: keys/
              command: >
                aws s3 cp --recursive s3://${BUCKET}/${PREFIX} /tmp/keys &&
                cat /tmp/keys/* >> /home/ubuntu/.ssh/authorized_keys &&
                rm -rf /tmp/keys
            01_mountSwapVolume:
              command: >
                fallocate -l 2G /mnt/swap &&
                mkswap /mnt/swap &&
                chmod 600 /mnt/swap &&
                swapon /mnt/swap &&
                echo '/mnt/swap  none  swap  sw 0 0' >> /etc/fstab &&
                sysctl -w vm.swappiness=1 &&
                echo 'vm.swappiness = 1' >> /etc/sysctl.conf;
            02_downloadBlockchainDb:
              test: !If [SeedBlockchainFromS3, true, false]
              command: !Sub
                - |
                  mkdir -p /home/ubuntu/${DATA_DIR}/lmdb &&
                  aws s3 cp --no-progress s3://${AWS::Region}.${BUCKET}/${PREFIX}lmdb/data.mdb /home/ubuntu/${DATA_DIR}/lmdb/data.mdb &&
                  aws s3 cp --no-progress s3://${AWS::Region}.${BUCKET}/${PREFIX}lmdb/lock.mdb /home/ubuntu/${DATA_DIR}/lmdb/lock.mdb &&
                  chown -R ubuntu: /home/ubuntu/${DATA_DIR}
                - BUCKET: !FindInMap [DeploymentMap, !Ref 'DeploymentType', S3Bucket]
                  PREFIX: daemon/
                  DATA_DIR: !FindInMap [RegionMap, Global, DataDir]
            03_enableSupervisorWeb:
              command: >
                /bin/echo -e '[inet_http_server]\nport = *:8081\n' >> /etc/supervisor/supervisord.conf &&
                service supervisor stop

        Deploy:
          commands:
            00_deploy:
              env:
                BRANCH: !Ref 'Branch'
                DAEMONOPTS: !Join [' ', [
                  '--hide-my-port',
                  '--limit-rate-up', !Ref 'TXRateLimitKBs'
                ]]
                DAEMON_BIN_URL: !Ref 'DaemonBinUrl'
              command: >
                wget -O- https://raw.githubusercontent.com/LetheanMovement/lethean-vpn/${BRANCH}/server/easy-deploy-aws.sh |
                sudo
                ENDPOINT="$(curl http://169.254.169.254/latest/meta-data/public-ipv4)"
                BRANCH="${BRANCH}"
                DAEMON_BIN_URL="${DAEMON_BIN_URL}"
                DAEMONOPTS="${DAEMONOPTS}"
                -i -u ubuntu
            01_installUploadCron:
              command: >
                hour=$(($(dd if=/dev/urandom count=1 2>/dev/null | cksum | cut -d' ' -f1) % 24)) &&
                minute=$(($(dd if=/dev/urandom count=1 2>/dev/null | cksum | cut -d' ' -f1) % 60)) &&
                ( crontab -u ubuntu -l; echo "${minute} ${hour} * * * /bin/bash /home/ubuntu/upload_lmdb.sh 1>>/home/ubuntu/upload_lmdb.log 2>&1"; ) | crontab -u ubuntu -

    Properties:
      LaunchTemplateName: !Join ['-', [
        !Ref 'AWS::StackName',
        !Select ['0', !Split ['-', !Select ['2', !Split [/, !Ref 'AWS::StackId']]]],
        LT
      ]]
      LaunchTemplateData:
        ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
        InstanceType: !Ref 'InstanceType'
        KeyName: !FindInMap [RegionMap, Global, Key]
        IamInstanceProfile:
          Name: !Ref 'S3ReadOnlyAccessInstanceProfile'
        SecurityGroupIds: !If [
          AttachToTempSecurityGroup,
          [
            !GetAtt 'NodeSecurityGroup.GroupId',
            !ImportValue {'Fn::Sub': '${VPCStack}-TempSecurityGroup'}
          ],
          [
            !GetAtt 'NodeSecurityGroup.GroupId'
          ]
        ]
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: 32
              VolumeType: gp2
        CreditSpecification:
          CpuCredits:
            unlimited
        UserData:
          Fn::Base64:
            Fn::Sub:
            - |
              #!/bin/bash -xe
              export PATH=${!PATH}:/usr/local/bin &&
              apt-get -y update &&
              DEBIAN_FRONTEND=noninteractive apt-get -y upgrade &&
              apt-get -y install python-pip &&
              pip install --upgrade setuptools &&
              easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz

              #############################
              # Helper function
              #############################
              function error_exit
              {
                error=$1
                if [[ -z $error ]]; then error=1; fi
                cfn-signal -e $error --resource ${SignalResourceName} --stack ${AWS::StackName} --region ${AWS::Region}
                exit $error
              }
              #############################
              # Run cfn-init
              #############################
              cfn-init -v --resource ${ResourceName} --stack ${AWS::StackName} --region ${AWS::Region} || error_exit $?
              #############################
              # Trigger complete signal
              #############################
              cfn-signal -e 0 --resource ${SignalResourceName} --stack ${AWS::StackName} --region ${AWS::Region}
            - ResourceName: LaunchTemplate
              SignalResourceName: AutoScalingGroup

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        - !ImportValue {'Fn::Sub': '${VPCStack}-AZ0'}
        - !ImportValue {'Fn::Sub': '${VPCStack}-AZ1'}
      LaunchTemplate:
        LaunchTemplateId: !Ref 'LaunchTemplate'
        Version: !GetAtt 'LaunchTemplate.LatestVersionNumber'
      VPCZoneIdentifier:
        - !ImportValue {'Fn::Sub': '${VPCStack}-Subnet0'}
        - !ImportValue {'Fn::Sub': '${VPCStack}-Subnet1'}
      Tags:
        - PropagateAtLaunch: 'true'
          Key: Name
          Value: lthn-node
      DesiredCapacity: !Ref 'DesiredNumberOfNodes'
      MinSize: 0
      MaxSize: 5
      TargetGroupARNs:
       - !Ref 'RPCTargetGroup'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M

Outputs:
  LoadBalancerURL:
    Description: The URL of the website (ELB)
    Value: !Join ['', ['http://', !GetAtt 'LoadBalancer.DNSName', ':48782/getheight']]

  DNSURL:
    Description: The URL of the website (DNS)
    Value: !Join ['', [
      'http://',
      nodes.,
      !Ref 'AWS::Region',
      .,
      !FindInMap [DeploymentMap, !Ref 'DeploymentType', HostedZone],
      ':48782/getheight'
    ]]
